(()=>{"use strict";var e={188:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(537),a=t.n(r),d=t(645),s=t.n(d)()(a());s.push([e.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.hide{display:none}html{overflow-x:hidden;font-family:"Helvetica"}html body{width:100vw;max-width:100vw;height:100vh;min-height:100vh;display:flex;flex-direction:column;overflow:hidden}html body .wrapper{width:100%;height:100%;margin:calc(.6*(1rem + 1vh + 1vw)) calc(.4*(1rem + 1vh + 1vw))}html body .wrapper header{min-width:100%;min-height:5vh;display:flex;justify-content:flex-start}html body .wrapper header .ssbbd{cursor:pointer;font-size:calc(.8*(1rem + 1vh + 1vw));width:fit-content;display:grid;grid-template-areas:". s1 s2 hidden-b1 hidden-b2 hidden-d" "s3 b1 b2 d i o"}html body .wrapper header .ssbbd .letter{width:calc(.8*(1rem + 1vh + 1vw));height:calc(.8*(1rem + 1vh + 1vw));display:flex;justify-content:center;align-items:center}html body .wrapper header .ssbbd .letter.faded{color:rgba(0,0,0,.349)}html body .wrapper header .ssbbd #s1{grid-area:s1}html body .wrapper header .ssbbd #s2{grid-area:s2}html body .wrapper header .ssbbd #hidden-b1{grid-area:hidden-b1}html body .wrapper header .ssbbd #hidden-b2{grid-area:hidden-b2}html body .wrapper header .ssbbd #hidden-d{grid-area:hidden-d}html body .wrapper header .ssbbd #s3{grid-area:s3}html body .wrapper header .ssbbd #b1{grid-area:b1}html body .wrapper header .ssbbd #b2{grid-area:b2}html body .wrapper header .ssbbd #d{grid-area:d}html body .wrapper header .ssbbd #i{grid-area:i}html body .wrapper header .ssbbd #o{grid-area:o}',"",{version:3,sources:["webpack://./src/style/meyer.scss","webpack://./src/style/index.scss"],names:[],mappings:"AAAA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CCJD,MACI,YAAA,CAGJ,KACI,iBAAA,CACA,uBAhBS,CAkBT,UACI,WAAA,CACA,eAAA,CACA,YAAA,CACA,gBAAA,CACA,YAAA,CACA,qBAAA,CACA,eAAA,CAEA,mBACI,UAAA,CACA,WAAA,CACA,8DAxBE,CA0BF,0BACI,cAAA,CACA,cAAA,CACA,YAAA,CACA,0BAAA,CAEA,iCACI,cAAA,CACA,qCAjCX,CAkCW,iBAAA,CACA,YAAA,CACA,2EACI,CAGJ,yCACI,iCAzCf,CA0Ce,kCA1Cf,CA2Ce,YAAA,CACA,sBAAA,CACA,kBAAA,CAGJ,+CACI,sBAAA,CAGJ,qCACI,YAAA,CAGJ,qCACI,YAAA,CAGJ,4CACI,mBAAA,CAGJ,4CACI,mBAAA,CAGJ,2CACI,kBAAA,CAGJ,qCACI,YAAA,CAGJ,qCACI,YAAA,CAGJ,qCACI,YAAA,CAGJ,oCACI,WAAA,CAGJ,oCACI,WAAA,CAGJ,oCACI,WAAA",sourcesContent:["html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}","@use 'meyer';\n$rvv: calc(1rem + 1vh + 1vw);\n\n// fonts:\n$font-stack: 'Helvetica';\n\n// colors:\n$green: #20C20E;\n\n// dimensions:\n$body-margin: calc(0.6*$rvv) calc(0.4*$rvv);\n$letter: calc(0.8*$rvv);\n$ssbbd-font-size: $letter;\n\n.hide {\n    display: none;\n}\n\nhtml {\n    overflow-x: hidden;\n    font-family: $font-stack;\n\n    body {\n        width: 100vw;\n        max-width: 100vw;\n        height: 100vh;\n        min-height: 100vh;\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n    \n        .wrapper {\n            width: 100%;\n            height: 100%;\n            margin: $body-margin;\n    \n            header {\n                min-width: 100%;\n                min-height: 5vh;\n                display: flex;\n                justify-content: flex-start;\n\n                .ssbbd {\n                    cursor: pointer;\n                    font-size: $ssbbd-font-size;\n                    width: fit-content;\n                    display: grid;\n                    grid-template-areas: \n                        \". s1 s2 hidden-b1 hidden-b2 hidden-d\"\n                        \"s3 b1 b2 d i o\";\n\n                    .letter {\n                        width: $letter;\n                        height: $letter;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                    }\n\n                    .letter.faded {\n                        color: rgba(0, 0, 0, 0.349);\n                    }\n\n                    #s1 {\n                        grid-area: s1;\n                    }\n\n                    #s2 {\n                        grid-area: s2;\n                    }\n\n                    #hidden-b1 {\n                        grid-area: hidden-b1;\n                    }\n\n                    #hidden-b2 {\n                        grid-area: hidden-b2;\n                    }\n\n                    #hidden-d {\n                        grid-area: hidden-d;\n                    }\n \n                    #s3 {\n                        grid-area: s3;\n                    }\n\n                    #b1 {\n                        grid-area: b1;\n                    }\n\n                    #b2 {\n                        grid-area: b2;\n                    }\n\n                    #d {\n                        grid-area: d;\n                    }\n\n                    #i {\n                        grid-area: i;\n                    }\n\n                    #o {\n                        grid-area: o;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// desktop rules:\n@media (min-width: 600px) {\n    body {\n        .wrapper {\n            header {\n                .ssbbd {\n                }\n            }\n        }\n    }   \n}"],sourceRoot:""}]);const o=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,d){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(s[i]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&s[l[0]]||(void 0!==d&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=d),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),d="/*# ".concat(a," */");return[n].concat([d]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var d={},s=[],o=0;o<e.length;o++){var i=e[o],c=r.base?i[0]+r.base:i[0],l=d[c]||0,A="".concat(c," ").concat(l);d[c]=l+1;var u=t(A),p={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var h=a(p,r);r.byIndex=o,n.splice(o,0,{identifier:A,updater:h,references:1})}s.push(A)}return s}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var d=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<d.length;s++){var o=t(d[s]);n[o].references--}for(var i=r(e,a),c=0;c<d.length;c++){var l=t(d[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}d=i}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var d=t.sourceMap;d&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(d))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var d=n[r]={id:r,exports:{}};return e[r](d,d.exports,t),d.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),d=t(569),s=t.n(d),o=t(565),i=t.n(o),c=t(216),l=t.n(c),A=t(589),u=t.n(A),p=t(188),h={};function b(){document.querySelector("#s1").classList.remove("faded"),document.querySelector("#s2").classList.remove("faded"),document.querySelector("#hidden-b1").textContent="",document.querySelector("#hidden-b2").textContent="",document.querySelector("#hidden-d").textContent="";const e=document.querySelector("#s3");e.textContent="",e.classList.remove("faded");const n=document.querySelector("#b1");n.textContent="b",n.classList.remove("faded");const t=document.querySelector("#b2");t.textContent="b",t.classList.remove("faded"),document.querySelector("#i").textContent="",document.querySelector("#o").textContent=""}h.styleTagTransform=u(),h.setAttributes=i(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=l(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals,document.body.innerHTML='<div class="wrapper"> <header> <div class="ssbbd"> <span class="letter first-line" id="s1">s</span> <span class="letter first-line" id="s2">s</span> <span class="letter first-line faded" id="hidden-b1"></span> <span class="letter first-line faded" id="hidden-b2"></span> <span class="letter first-line faded" id="hidden-d"></span> <span class="letter faded" id="s3"></span> <span class="letter" id="b1">b</span> <span class="letter" id="b2">b</span> <span class="letter" id="d">d</span> <span class="letter faded" id="i"></span> <span class="letter faded" id="o"></span> </div> </header> </div>',document.querySelector(".ssbbd").addEventListener("mouseover",(function(){document.querySelector("#s1").classList.add("faded"),document.querySelector("#s2").classList.add("faded"),document.querySelector("#hidden-b1").textContent="b",document.querySelector("#hidden-b2").textContent="b",document.querySelector("#hidden-d").textContent="d";const e=document.querySelector("#s3");e.textContent="s",e.classList.add("faded");const n=document.querySelector("#b1");n.textContent="t",n.classList.add("faded");const t=document.querySelector("#b2");t.textContent="u",t.classList.add("faded"),document.querySelector("#i").textContent="i",document.querySelector("#o").textContent="o",document.querySelector(".ssbbd").addEventListener("mouseout",b,{once:!0})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,